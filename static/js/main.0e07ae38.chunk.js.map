{"version":3,"sources":["components/Header.js","components/Footer.js","firebase.js","components/Preloader.js","components/GameList.js","helpers.js","components/SavedGame.js","components/NewGame.js","fontawesome.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Footer","href","target","rel","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Preloader","xmlns","version","id","in","stdDeviation","result","mode","values","GameList","state","games","database","ref","on","data","response","val","newState","objKey","push","created","gameName","category","numQuestions","questionSet","length","sort","a","b","setState","onClick","toggleGame","this","map","game","selectSavedGame","key","tabIndex","Component","categories","27","9","22","23","11","17","21","handleChoiceSelection","event","questionSetCopy","obj","name","userAnswer","value","correctAnswer","isCorrect","showIcon","rightAnswer","choice","isSubmitted","icon","aria-hidden","alertScore","score","totalQuestions","title","type","allowOutsideClick","customClass","popup","confirmButton","alertSubmit","alertPlayAgain","showCancelButton","cancelButton","alertAPIError","saveGame","newGameObject","newGameRef","set","Date","now","Swal","fire","text","content","SavedGame","handleChange","submitAnswers","preventDefault","form","filter","confirmButtonText","cancelButtonText","then","reset","window","scrollTo","savedGameId","once","gameObject","action","onSubmit","index","onChange","question","choices","i","uniqueKey","htmlFor","NewGame","createQuestionSet","responseData","choicesArray","forEach","htmlDecode","correct_answer","getChoices","arrayOfQuestionObjects","incorrect_answers","randomIndex","Math","floor","random","splice","setChoices","txt","document","createElement","innerHTML","handleCriteria","handlePlay","resetStates","axios","url","params","amount","difficulty","results","catch","error","placeholder","required","library","add","fab","faTimes","faCheck","App","renderComponent","componentToShow","chosenGame","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e07ae38.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n\treturn (\n\t\t<header className={props.className}>\n\t\t\t<h1>Not So Trivial Pursuit</h1>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<footer>\n\t\t\t<p>\n\t\t\t\t&copy; 2019{' '}\n\t\t\t\t<a\n\t\t\t\t\thref='https://www.alexandralim.dev'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t>\n\t\t\t\t\tAlex\n\t\t\t\t\t</a>\n\t\t\t\t,{' '}\n\t\t\t\t<a\n\t\t\t\t\thref='https://anamorales.dev/'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t>\n\t\t\t\t\tAna\n\t\t\t\t\t</a>\n\t\t\t\t,{' '}\n\t\t\t\t<a\n\t\t\t\t\thref='https://www.danielfitz.com'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t>\n\t\t\t\t\tDan\n\t\t\t\t\t</a>\n\t\t\t\t, and{' '}\n\t\t\t\t<a\n\t\t\t\t\thref='http://www.pujacodes.com/'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t>\n\t\t\t\t\tPuja\n\t\t\t\t\t</a>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tPowered by{' '}\n\t\t\t\t<a\n\t\t\t\t\thref='https://opentdb.com/api_config.php'\n\t\t\t\t\ttarget='_blank'\n\t\t\t\t\trel='noopener noreferrer'\n\t\t\t\t>\n\t\t\t\t\tOpen Trivia Database API\n\t\t\t\t\t</a>\n\t\t\t</p>\n\t\t</footer >\n\t);\n}\n\nexport default Footer;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBpw3tE6AJyaDq67EN3TSNLSYQCL-Ylxis\",\n  authDomain: \"not-so-trivial-pursuit.firebaseapp.com\",\n  databaseURL: \"https://not-so-trivial-pursuit.firebaseio.com\",\n  projectId: \"not-so-trivial-pursuit\",\n  storageBucket: \"\",\n  messagingSenderId: \"657152516422\",\n  appId: \"1:657152516422:web:57fd70d13c20a1e33e0547\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React from 'react';\n\nconst Preloader = () => {\n    return (\n        <div className='preloader'>\n            < div className='container' >\n                <div className='dot dot-1'></div>\n                <div className='dot dot-2'></div>\n                <div className='dot dot-3'></div>\n            </div >\n\n            <svg xmlns='http://www.w3.org/2000/svg' version='1.1'>\n                <defs>\n                    <filter id='goo'>\n                        <feGaussianBlur in='SourceGraphic' stdDeviation='10' result='blur' />\n                        <feColorMatrix in='blur' mode='matrix' values='1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 21 -7' />\n                    </filter>\n                </defs>\n            </svg>\n        </div>\n    );\n}\n\nexport default Preloader;\n\n","import React, { Component } from 'react';\nimport firebase from '../firebase';\nimport Preloader from './Preloader';\n\nclass GameList extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgames: []\n\t\t};\n\t}\n\n\t// On mount, get the firebase data\n\n\tcomponentDidMount() {\n\t\tconst dbRef = firebase.database().ref();\n\n\t\tdbRef.on('value', data => {\n\t\t\tconst response = data.val();\n\n\t\t\tconst newState = [];\n\n\t\t\tfor (let objKey in response) {\n\t\t\t\tnewState.push({\n\t\t\t\t\tid: objKey,\n\t\t\t\t\tcreated: response[objKey].created,\n\t\t\t\t\tgameName: response[objKey].gameName,\n\t\t\t\t\tcategory: response[objKey].category,\n\t\t\t\t\tnumQuestions: response[objKey].questionSet.length\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Sorts games from newest to oldest\n\t\t\tnewState.sort((a, b) => a.created < b.created ? 1 : -1);\n\n\t\t\tthis.setState({\n\t\t\t\tgames: newState\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<section className='gameListSection'>\n\t\t\t\t<button className='returnHome button' onClick={() => this.props.toggleGame('')}>X</button>\n\n\t\t\t\t<div className='gameListHeading'>\n\t\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t\t<h2>Saved Games</h2>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<ul className='existingGames'>\n\t\t\t\t\t{this.state.games.map(game => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\tclassName='existingGame'\n\t\t\t\t\t\t\t\tonClick={() => this.props.selectSavedGame(game.id)}\n\t\t\t\t\t\t\t\tkey={game.id}\n\t\t\t\t\t\t\t\ttabIndex='0'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t\t\t\t\t<h3>{game.gameName}</h3>\n\t\t\t\t\t\t\t\t\t<p>Category: {game.category}</p>\n\t\t\t\t\t\t\t\t\t<p>Number of questions: {game.numQuestions}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\n\t\t\t\t{!this.state.games.length ? <Preloader /> : null}\n\t\t\t</section>\n\t\t);\n\t}\n}\n\nexport default GameList;\n","import firebase from './firebase';\nimport Swal from 'sweetalert2/src/sweetalert2.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\n\nconst categories = {\n\t27: 'Animals',\n\t9: 'General Knowledge',\n\t22: 'Geography',\n\t23: 'History',\n\t11: 'Movies',\n\t17: 'Science and Nature',\n\t21: 'Sports'\n};\n\nconst saveGame = (gameName, category, questionSet) => {\n\tconst newGameObject = {\n\t\tgameName: gameName ? gameName : 'Untitled Trivia Game',\n\t\tcategory: categories[category],\n\t\tquestionSet: questionSet\n\t};\n\n\tconst dbRef = firebase.database().ref();\n\n\tconst newGameRef = dbRef.push();\n\tnewGameRef.set({\n\t\tid: newGameRef.key,\n\t\tcreated: Date.now(),\n\t\t...newGameObject\n\t});\n\n\tSwal.fire({\n\t\ttitle: 'Saved!',\n\t\ttext: 'Your game is now in the Saved Games list!',\n\t\ttype: 'success',\n\t\tcustomClass: {\n\t\t\tpopup: 'ourSwal',\n\t\t\ttitle: 'swalTitle',\n\t\t\tcontent: 'swalText',\n\t\t\tconfirmButton: 'mySwalConfirmButton'\n\t\t}\n\t});\n};\n\nexport const handleChoiceSelection = (props, event) => {\n\tconst questionSetCopy = [...props.state.questionSet];\n\n\t// Update the userAnswer property value with what the user selected answer\n\tconst obj = questionSetCopy[event.target.name];\n\tobj.userAnswer = event.target.value;\n\n\tif (obj.userAnswer === obj.correctAnswer) {\n\t\tobj.isCorrect = true;\n\t} else {\n\t\tobj.isCorrect = false;\n\t}\n\n\tprops.setState({\n\t\tquestionSet: questionSetCopy\n\t});\n};\n\nexport const showIcon = (props, userAnswer, rightAnswer, choice) => {\n\tif (props.state.isSubmitted) {\n\t\tif (rightAnswer === choice) {\n\t\t\treturn (\n\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\ticon='check'\n\t\t\t\t\tclassName='answerIcon'\n\t\t\t\t\taria-hidden />\n\t\t\t)\n\t\t} else if (userAnswer === choice) {\n\t\t\treturn (\n\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\ticon='times'\n\t\t\t\t\tclassName='answerIcon'\n\t\t\t\t\taria-hidden />\n\t\t\t)\n\t\t}\n\t} else {\n\t\treturn ''\n\t}\n}\n\nexport const alertScore = (score, totalQuestions) => {\n\treturn {\n\t\ttitle: `Your final score is ${score}/${totalQuestions}`,\n\t\ttype: 'info',\n\t\tallowOutsideClick: false,\n\t\tcustomClass: {\n\t\t\tpopup: 'ourSwal',\n\t\t\ttitle: 'swalTitle',\n\t\t\tconfirmButton: 'mySwalConfirmButton',\n\t\t}\n\t}\n}\n\nexport const alertSubmit = {\n\ttitle: 'Please answer all the questions before submitting.',\n\ttype: 'error',\n\tallowOutsideClick: false,\n\tcustomClass: {\n\t\tpopup: 'ourSwal',\n\t\ttitle: 'swalTitle',\n\t\tconfirmButton: 'mySwalConfirmButton',\n\t}\n}\n\nexport const alertPlayAgain = {\n\ttitle: 'Play again?',\n\ttype: 'question',\n\tshowCancelButton: true,\n\tallowOutsideClick: false,\n\tcustomClass: {\n\t\tpopup: 'ourSwal',\n\t\ttitle: 'swalTitle',\n\t\tconfirmButton: 'mySwalConfirmButton',\n\t\tcancelButton: 'mySwalCancelButton'\n\t}\n}\n\nexport const alertAPIError = {\n\ttitle: 'Something is wrong.  Please try again later',\n\ttype: 'error',\n\tcustomClass: {\n\t\tpopup: 'ourSwal',\n\t\ttitle: 'swalTitle',\n\t\tconfirmButton: 'mySwalConfirmButton',\n\t}\n}\n\nexport default saveGame;\n","import React, { Component } from 'react';\nimport firebase from '../firebase.js';\nimport Swal from 'sweetalert2';\nimport { handleChoiceSelection, showIcon } from '../helpers.js';\n\nclass SavedGame extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tquestionSet: [],\n\t\t\tgameName: '',\n\t\t\tcategory: '',\n\t\t\tscore: 0,\n\t\t\tisSubmitted: false\n\t\t};\n\t}\n\n\t// On mount, get the Firebase data for 1 game\n\tcomponentDidMount() {\n\t\tconst gameRef = firebase.database().ref(this.props.savedGameId);\n\n\t\tgameRef.once('value', response => {\n\t\t\tconst gameObject = response.val();\n\n\t\t\tthis.setState({\n\t\t\t\tquestionSet: gameObject.questionSet,\n\t\t\t\tgameName: gameObject.gameName,\n\t\t\t\tcategory: gameObject.category\n\t\t\t});\n\t\t});\n\t}\n\n\t// Whenever user chooses a radio option, it updates the value in the answers array in state\n\thandleChange = event => {\n\t\thandleChoiceSelection(this, event);\n\t};\n\n\t// score quiz once answers are submitted\n\tsubmitAnswers = event => {\n\t\tevent.preventDefault();\n\n\t\tconst form = event.target;\n\t\tconst correctAnswers = this.state.questionSet.filter(userAnswer => {\n\t\t\treturn userAnswer.isCorrect;\n\t\t});\n\t\tconst score = correctAnswers.length;\n\n\t\tthis.setState({\n\t\t\tisSubmitted: true\n\t\t})\n\n\t\tSwal.fire({\n\t\t\ttitle: `Your final score is ${score}/${this.state.questionSet.length}`,\n\t\t\ttext: 'Would you like to play again?',\n\t\t\ttype: 'success',\n\t\t\tshowCancelButton: true,\n\t\t\tconfirmButtonText: 'Yes, play again',\n\t\t\tcancelButtonText: 'No, exit the game',\n\t\t\tallowOutsideClick: false,\n\t\t\tcustomClass: {\n\t\t\t\tpopup: 'ourSwal',\n\t\t\t\ttitle: 'swalTitle',\n\t\t\t\tcontent: 'swalText',\n\t\t\t\tconfirmButton: 'mySwalConfirmButton',\n\t\t\t\tcancelButton: 'mySwalCancelButton'\n\t\t\t}\n\t\t}).then(result => {\n\t\t\tif (result.value) {\n\t\t\t\tform.reset();\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tisSubmitted: false\n\t\t\t\t});\n\n\t\t\t\twindow.scrollTo(0, 0);\n\n\t\t\t} else {\n\t\t\t\tthis.props.toggleGame('');\n\t\t\t}\n\t\t});\n\t};\n\n\t// Renders a form element with multiple divs (for each question) and 1 submit input\n\trender() {\n\t\treturn (\n\t\t\t<form className='savedGame' action='' id='radioInputs' onSubmit={this.submitAnswers}>\n\t\t\t\t<button className='returnHome button' onClick={() => this.props.toggleGame('')}>X</button>\n\n\t\t\t\t<div className='gameHeading'>\n\t\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t\t<h2>{this.state.gameName}</h2>\n\t\t\t\t\t\t<h3>{this.state.category}</h3>\n\t\t\t\t\t\t<h4>Number of questions: {this.state.questionSet.length}</h4>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t{\n\t\t\t\t\tthis.state.questionSet.map((data, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tclassName='question'\n\t\t\t\t\t\t\t\tonChange={this.handleChange}>\n\t\t\t\t\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t\t\t\t\t<h2>\n\t\t\t\t\t\t\t\t\t\t{index + 1}. {data.question}\n\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t<div className='choices'>\n\t\t\t\t\t\t\t\t\t\t{data.choices.map((choice, i) => {\n\t\t\t\t\t\t\t\t\t\t\tconst uniqueKey = `${index}`;\n\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<div key={`${index}-${i}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='radio'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={uniqueKey}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={`${uniqueKey}-${i}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={choice}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='radioButton'\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thtmlFor={`${uniqueKey}-${i}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='questionLabel'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{choice}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshowIcon(this, data.userAnswer, data.correctAnswer, choice)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t{this.state.questionSet.length ? (\n\t\t\t\t\t<div className='buttons'>\n\t\t\t\t\t\t<button className='formSubmit button'>Submit</button>\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t\t})\n\t\t\t}\n\t\t\t</form >\n\t\t);\n\t}\n}\n\nexport default SavedGame;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport saveGame, { handleChoiceSelection, alertSubmit, alertPlayAgain, alertAPIError, alertScore, showIcon } from '../helpers';\nimport Swal from 'sweetalert2';\n\nclass NewGame extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t/*  States:\n            responseData -  the api response results objects\n            choices -  the answer choices including the correct_answer\n            questionSet - the questions, correct_answer, choices, userAnswer\n            category - the category criteria\n            numQuestions - number of questions criteria\n\t\t\tgameName - game name\n\t\t\tisSubmitted - will update if user clicks submit\n        */\n\t\tthis.state = {\n\t\t\tresponseData: [],\n\t\t\tchoices: [],\n\t\t\tquestionSet: [],\n\t\t\tcategory: '',\n\t\t\tnumQuestions: 10,\n\t\t\tgameName: '',\n\t\t\tisSubmitted: false\n\t\t};\n\t}\n\n\tcreateQuestionSet = (responseData, choicesArray) => {\n\t\t// Create an array of objects\n\t\tconst questionSet = [];\n\n\t\tresponseData.forEach((data, index) => {\n\t\t\tquestionSet.push({\n\t\t\t\tid: `Q-${index}`,\n\t\t\t\tquestion: this.htmlDecode(data.question),\n\t\t\t\tchoices: choicesArray[index],\n\t\t\t\tcorrectAnswer: this.htmlDecode(data.correct_answer),\n\t\t\t\tuserAnswer: '',\n\t\t\t\tisCorrect: ''\n\t\t\t});\n\t\t});\n\n\t\treturn questionSet;\n\t};\n\n\tgetChoices = arrayOfQuestionObjects => {\n\t\tconst choicesArray = [];\n\n\t\tarrayOfQuestionObjects.forEach((question, index) => {\n\t\t\t// responseData incorrect_answers property data type is an Array.  Push the incorrect_answers array to the choices array\n\t\t\t// choices.push(question.incorrect_answers);\n\n\t\t\tchoicesArray.push(question.incorrect_answers);\n\n\t\t\t// Randomize the index position to insert the correct_answer\n\t\t\t// Multiply by the length of the incorrect_answers array + 1 (the correct_answer)\n\t\t\tconst randomIndex = Math.floor(\n\t\t\t\tMath.random() * (question.incorrect_answers.length + 1)\n\t\t\t);\n\n\t\t\t// Insert the correct answer using the index position generated\n\t\t\tchoicesArray[index].splice(randomIndex, 0, question.correct_answer);\n\t\t});\n\n\t\t// use htmlDecode to convert choices texts\n\t\tchoicesArray.forEach(setChoices => {\n\t\t\tsetChoices.forEach((choice, i) => {\n\t\t\t\tsetChoices[i] = this.htmlDecode(choice);\n\t\t\t});\n\t\t});\n\n\t\treturn choicesArray;\n\t};\n\n\t// Function to convert ascii characters to their human-readable character i.e. &039 = ' (apostrophe)\n\thtmlDecode = val => {\n\t\tconst txt = document.createElement('textarea');\n\t\ttxt.innerHTML = val;\n\t\treturn txt.value;\n\t};\n\n\thandleCriteria = event => {\n\t\tthis.setState({\n\t\t\t[event.target.name]: event.target.value\n\t\t});\n\t};\n\n\thandlePlay = event => {\n\t\tevent.preventDefault();\n\n\t\tthis.resetStates();\n\n\t\t// Connect to API\n\t\taxios({\n\t\t\turl: 'https://opentdb.com/api.php',\n\t\t\tparams: {\n\t\t\t\tcategory: this.state.category,\n\t\t\t\tamount: this.state.numQuestions,\n\t\t\t\ttype: 'multiple',\n\t\t\t\tdifficulty: 'easy'\n\t\t\t}\n\t\t})\n\t\t\t.then(response => {\n\t\t\t\t// Grab only the info that we need.  data.results is an Array of Objects\n\t\t\t\tconst responseData = response.data.results;\n\n\t\t\t\t// Create choices state (incorrect + randomized position of correct answer)\n\t\t\t\tconst choices = this.getChoices(responseData);\n\n\t\t\t\t// Create questsionSet state which is an array of objects that contain qustion, choices, correct_answer key/value pairs\n\t\t\t\tconst questionSet = this.createQuestionSet(responseData, choices);\n\n\t\t\t\t// Set the trivia state to the api data.results array of object\n\t\t\t\tthis.setState({\n\t\t\t\t\tresponseData,\n\t\t\t\t\tchoices,\n\t\t\t\t\tquestionSet\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\t// When api call fails, display human readable message to user.\n\t\t\t\tSwal.fire(alertAPIError);\n\t\t\t});\n\t};\n\n\t// Function to handle the change\n\thandleChange = event => {\n\t\thandleChoiceSelection(this, event);\n\t};\n\n\t// score quiz once answers are submitted\n\tsubmitAnswers = event => {\n\t\tevent.preventDefault();\n\n\t\t// We need to validate if the user answered all the questions so filter the questionSet objects that have userAnswer values\n\t\tconst answeredQuestions = this.state.questionSet.filter((obj) => {\n\t\t\treturn obj.userAnswer !== '';\n\t\t})\n\n\t\t// Show error if the user did not answer all the questions. Otherwise, show the score\n\t\tif (answeredQuestions.length != this.state.numQuestions) {\n\t\t\tSwal.fire(alertSubmit);\n\n\t\t} else {\n\t\t\tconst correctAnswers = this.state.questionSet.filter(userAnswer => {\n\t\t\t\treturn userAnswer.isCorrect;\n\t\t\t});\n\t\t\tconst score = correctAnswers.length;\n\n\t\t\tthis.setState({\n\t\t\t\tisSubmitted: true\n\t\t\t})\n\n\t\t\tSwal.fire(alertScore(score, this.state.questionSet.length))\n\t\t\t\t.then(() => {\n\t\t\t\t\tSwal.fire(alertPlayAgain).then(result => {\n\t\t\t\t\t\tif (result.value) {\n\t\t\t\t\t\t\tthis.resetStates();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t}\n\t};\n\n\tresetStates = () => {\n\t\tthis.setState({\n\t\t\tresponseData: [],\n\t\t\tchoices: [],\n\t\t\tquestionSet: [],\n\t\t\tisSubmitted: false\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { questionSet, gameName, category } = this.state;\n\n\t\treturn (\n\t\t\t<div className='newGameTrivia'>\n\t\t\t\t<button className='returnHome button' onClick={() => this.props.toggleGame('')}>X</button>\n\t\t\t\t<form onSubmit={this.handlePlay} className='criteria'>\n\t\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t\t<div className='criteriaType'>\n\t\t\t\t\t\t\t<label htmlFor='gameName'>Game Name</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\tid='gameName'\n\t\t\t\t\t\t\t\tname='gameName'\n\t\t\t\t\t\t\t\tplaceholder='Enter name here'\n\t\t\t\t\t\t\t\tonChange={this.handleCriteria}\n\t\t\t\t\t\t\t\tvalue={this.state.gameName}\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className='criteriaType'>\n\t\t\t\t\t\t\t<label htmlFor='category'>Categories</label>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname='category'\n\t\t\t\t\t\t\t\tid='category'\n\t\t\t\t\t\t\t\tonChange={this.handleCriteria}\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\tvalue={this.state.category}>\n\t\t\t\t\t\t\t\t<option value=''>Choose one</option>\n\t\t\t\t\t\t\t\t<option value='27'>Animals</option>\n\t\t\t\t\t\t\t\t<option value='9'>General Knowledge</option>\n\t\t\t\t\t\t\t\t<option value='22'>Geography</option>\n\t\t\t\t\t\t\t\t<option value='23'>History</option>\n\t\t\t\t\t\t\t\t<option value='11'>Movies</option>\n\t\t\t\t\t\t\t\t<option value='17'>Science and Nature</option>\n\t\t\t\t\t\t\t\t<option value='21'>Sports</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className='criteriaType'>\n\t\t\t\t\t\t\t<label htmlFor='numQuestions'>Number of Questions</label>\n\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\tname='numQuestions'\n\t\t\t\t\t\t\t\tid='numQuestions'\n\t\t\t\t\t\t\t\tclassName='numQuestions'\n\t\t\t\t\t\t\t\tonChange={this.handleCriteria}\n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\tvalue={this.state.numQuestions}>\n\t\t\t\t\t\t\t\t<option value='10'>10</option>\n\t\t\t\t\t\t\t\t<option value='15'>15</option>\n\t\t\t\t\t\t\t\t<option value='20'>20</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type='submit' className='playGame button'>Let's play</button>\n\t\t\t\t</form>\n\n\t\t\t\t<form action='' onSubmit={this.submitAnswers}>\n\t\t\t\t\t{questionSet.map((data, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tclassName='question'\n\t\t\t\t\t\t\t\tonChange={this.handleChange}>\n\t\t\t\t\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t\t\t\t\t<h2>\n\t\t\t\t\t\t\t\t\t\t{index + 1}. {data.question}\n\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t<div className='choices'>\n\t\t\t\t\t\t\t\t\t\t{data.choices.map((choice, i) => {\n\t\t\t\t\t\t\t\t\t\t\tconst uniqueKey = `${index}`;\n\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<div key={`${index}-${i}`}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='radio'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={uniqueKey}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={`${uniqueKey}-${i}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={choice}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='radioButton'\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thtmlFor={`${uniqueKey}-${i}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='questionLabel'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{choice}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshowIcon(this, data.userAnswer, data.correctAnswer, choice)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t\t{this.state.questionSet.length ? (\n\t\t\t\t\t\t<div className='buttons'>\n\t\t\t\t\t\t\t<button className='button'>Submit</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : null}\n\t\t\t\t</form>\n\t\t\t\t{this.state.questionSet.length ? (\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='button'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsaveGame(gameName, category, questionSet);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\tSave Game\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NewGame;\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faTimes, faCheck } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(fab, faTimes, faCheck);","import React, { Component } from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\nimport GameList from './GameList';\nimport SavedGame from './SavedGame';\nimport NewGame from '../components/NewGame';\nimport '.././styles/App.scss';\nimport '../fontawesome';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcomponentToShow: '',\n\t\t\tsavedGameId: ''\n\n\t\t};\n\t}\n\n\t// which game to render based on user choice and toggleGame function\n\trenderComponent = () => {\n\t\tif (this.state.componentToShow === 'newGame') {\n\t\t\treturn (\n\t\t\t\t<NewGame\n\t\t\t\t\ttoggleGame={this.toggleGame}\n\t\t\t\t/>\n\t\t\t);\n\t\t} else if (this.state.componentToShow === 'gameList') {\n\t\t\treturn (\n\t\t\t\t<GameList\n\t\t\t\t\tselectSavedGame={this.selectSavedGame}\n\t\t\t\t\ttoggleGame={this.toggleGame}\n\t\t\t\t/>\n\t\t\t);\n\t\t} else if (this.state.componentToShow === 'savedGame') {\n\t\t\treturn (\n\t\t\t\t<SavedGame\n\t\t\t\t\tsavedGameId={this.state.savedGameId}\n\t\t\t\t\ttoggleGame={this.toggleGame}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t};\n\n\t// updates state with which game chosen and removes buttons\n\ttoggleGame = chosenGame => {\n\t\tthis.setState({\n\t\t\tcomponentToShow: chosenGame\n\t\t});\n\t};\n\n\tselectSavedGame = savedGameId => {\n\t\tthis.setState({\n\t\t\tsavedGameId: savedGameId,\n\t\t\tcomponentToShow: 'savedGame'\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='App'>\n\n\t\t\t\t<div className='wrapper'>\n\t\t\t\t\t<Header className={this.state.componentToShow ? 'smallHeader' : 'largeHeader'} />\n\n\t\t\t\t\t{/* New Game and Saved Game Buttons */}\n\t\t\t\t\t{!this.state.componentToShow ? (\n\t\t\t\t\t\t<section className='gameButtons'>\n\t\t\t\t\t\t\t<button className='button' type='submit' onClick={() => this.toggleGame('newGame')}>\n\t\t\t\t\t\t\t\tNew Game\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button className='button' type='submit' onClick={() => this.toggleGame('gameList')}>\n\t\t\t\t\t\t\t\tSaved Games\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t) : null}\n\n\t\t\t\t\t{this.renderComponent()}\n\n\t\t\t\t\t<Footer />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}